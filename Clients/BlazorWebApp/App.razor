@using System.Reflection
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@inject LazyAssemblyLoader AssemblyLoader
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly"
                OnNavigateAsync="OnNavigateAsync"
        AdditionalAssemblies="_lazyLoadedAssemblies">
        <Found Context="routeData">
            @*<RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />*@
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <Authorizing>
                    <text>Please wait, we are authorizint the user.</text>
                </Authorizing>
                <NotAuthorized>
                    @if (!context.User.Identity.IsAuthenticated)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p>You are not authorized to access this resource.</p>
                    }

                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <CustomNotFound />
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>
@code
{
    private List<Assembly> _lazyLoadedAssemblies = new List<Assembly>();
    private async Task OnNavigateAsync(NavigationContext context)
    {
        if (context.Path == "fetchdata")
        {
            //var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { "Weather.dll" });
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { "" });
            _lazyLoadedAssemblies.AddRange(assemblies);
        }
    }
}